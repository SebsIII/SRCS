<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Allura&family=Oswald:wght@200..700&display=swap" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Allura&family=Oswald:wght@200..700&family=Questrial&display=swap" rel="stylesheet">

    <title>SRCS Dashboard</title>
</head>
<style>

body{
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    margin: 0px;
    color: white;
    background-color: #0B0B0B;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    font-family: Questrial;
}

main{
    width: 90vw;
    height: 85vh;
    background: linear-gradient(to right, rgba(166, 166, 166,0.7), rgba(255, 255, 255,0.7));
    border-radius: 16px;
    margin: 0px;
    box-sizing: border-box;
    padding: 16px;
}

header{
    margin: 0px;
    display: flex;
    width: 100vw;
    height: 7.5vh;
    position: absolute;
    top: 0px;
    display: flex;
    align-items: baseline;
    padding-left: 20vw;
}

#SRCS-title{
    font-size: 24px;
    font-family: Oswald;
    transition: all 0.3s;
}
#SRCS-title:hover{
    cursor: pointer;
    transform: scale(110%);
}

#SRCS-subtitle{
    font-size: 22px;
    font-family: Oswald;
    color: #9D4EDD;
    margin-left: 4px;
}

footer{
    margin: 0px;
    display: flex;
    width: 100vw;
    height: 7.5vh;
    position: absolute;
    bottom: 0px;
    display: flex;
    align-items:center;
    justify-content: right;
    padding-right: 15vw;
}

#signature{
    font-family: Allura;
    font-size: 26px;
    transition: all 0.3s;
}
#signature:hover{
    cursor: pointer;
    transform: scale(110%);
    color: #9D4EDD;
}

#main-title{
    margin: 8px 0px 0px 5%;
    font-size: 24px;
}

#weather-div{
    width: 20vw;
    height: 45vh;
    background-color: #9D4EDD;
    border-radius: 16px;
    position: absolute;
    right: 6.5vw;
    top: 10.5vh;
    box-sizing: border-box;
    padding: 16px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#align-antenna-btn{
    width: 15vw;
    height: 8vh;
    color: white;
    background-color: #9D4EDD;
    border: none;
    border-radius: 16px;
    font-family: Oswald;
    font-size: 20px;
    transition: all 0.3s;
    margin: 0px 16px 0px 0px;
}

#align-north-btn{
    width: 8vw;
    height: 6vh;
    margin: 8px 0px;
    border: none;
    border-radius: 16px;
    transition: all 0.3s;
    background-color: #c3ae2a;
    font-family: Oswald;
    font-size: 16px;
}

.setup-btns:hover{
    cursor: pointer;
    transform: scale(105%);
    filter: brightness(95%);
}


#setup-div{
    width: fit-content;
    min-height: 8vh;
    margin: 0px;
    position: absolute;
    bottom: 10vh;
    left: 6.5vw;    
    display: flex;
    flex-direction: column;
    justify-content: left;
}

#status-div{
    background-color: white;
    width: 80%;
    height: 2vh;
    border-radius: 16px;
    position: absolute;
    right: 2vw;
    top: 90%;
}

.black{
    color: #0b0b0b;
}

#weather-title{
    font-size: 22px;
    margin: 4px;
}

#temperature-wrapper{
    margin: 16px 0px;
}

#temperature-var{
    font-size: 72px;
}

#humidity-wrapper{
    margin: 0px;
}

#humidity-var{
    font-size: 32px;
}

#GN-formatter{
    display: flex;
    margin: 32px;
}

.info-div{
    min-width: 15vw;
    height: fit-content;
    margin: 0px;
    font-size: 20px;
}

#general-title{
    margin: 8px;
    font-family: Oswald;
    font-size: 28px;
    color: #0B0B0B;
    transition: all 0.3s;
    width: fit-content;
}
#general-title:hover{
    cursor: pointer;
    transform: scale(115%);
    color: #e2c105;
}

#weather-data-title{
    margin: 8px;
    font-family: Oswald;
    font-size: 28px;
    color: #0B0B0B;
    transition: all 0.3s;
    width: fit-content;
}
#weather-data-title:hover{
    cursor: pointer;
    transform: scale(115%);
    color: #e2c105;
}

.data{
    margin: 4px;
}

#SRCS-data-div{
    margin: 32px;
}


#SRCS-div-title{
    margin: 8px;
    font-family: Oswald;
    font-size: 28px;
    color: #0B0B0B;
    transition: all 0.3s;
    width: fit-content;
}
#SRCS-div-title:hover{
    cursor: pointer;
    transform: scale(115%);
    color: #e2c105;
}

#popup-wrapper{
    position: absolute;
    align-self: center;
    display: none;
    align-items: center;
    justify-content: center;
    width: 100vw;
    height: 100vh;
    transition: all 0.2s;
    
}

#popup-div{
    z-index: 3;
    display: none;
    opacity: 0%;
    z-index: 5;
    width: 25vw;
    min-height: 30vh;
    background-color: #9D4EDD;
    box-sizing: border-box;
    padding: 16px;
    border-radius: 16px;
    box-shadow: 10px 10px rgba(0,0,0,0.4);
    transition: all 0.2s;
    flex-direction: column;
    align-items: center;
}

#popup-title{
    margin: 4px;
    font-family: Oswald;
}

#popup-subtitle{
    margin: 4px;
    text-align: center;
}

#popup-psw{
    height: 5vh;
    width: 60%;
    margin: 16px 0px;
    border: none;
    border-radius: 16px;
    box-sizing: border-box;
    padding: 16px
}

#popup-btn{
    height: 3vh;
    width: 30%;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
}
#popup-btn:hover{
    transform: scale(105%);
    filter: brightness(95%);
}

#antenna-animation{
    width: 30%;
    transition: all 0.7s;
}

#antenna-animation-div{
    padding: 0%;
    position: absolute;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 30vw;
    height: fit-content;
    right: 20vw;
    top: 12vh;
}
</style>
<body>
    <header>
        <p id="SRCS-title" onclick="location.href='index.html'">SRCS</p>
        <p id="SRCS-subtitle">Dashboard</p>
    </header>
    <main>
        <p id="main-title">Reception tab</p>
        <div id="GN-formatter">
            <div id="general-data-div" class="info-div">
                <p id="general-title" onclick="getGeneral()">General</p>
                <p class="data">AA = <a id="AA-var">N/A</a></p>
                <p class="data">AD = <a id="AD-var">N/A</a></p>
                <p class="data">MApDR = <a id="MApDR-var">N/A</a></p>
                <p class="data">MRC = <a id="MRC-var">N/A</a></p>
            </div>
            <div id="weather-data-div" class="info-div">
                <p id="weather-data-title" onclick="updateWeather()">Weather RAW</p>
                <p class="data">Light = <a id="light-RAW-var">N/A</a></p>
                <p class="data">Rain = <a id="rain-RAW-var">N/A</a></p>
                <p class="data">Wind = <a id="wind-RAW-var">N/A</a></p>
            </div>
            
            <div id="antenna-animation-div">
                <b>N</b>
                <img src="https://github.com/SebsIII/SRCS/blob/6e29a0632d3146aea96081d0aedd969c88c578ac/web-local/antenna-animation.png?raw=true" id="antenna-animation">
            </div>
        </div>
        <div id="SRCS-data-div" class="info-div">
            <p id="SRCS-div-title" onclick="getSRCS()">SRCS</p>
            <p class="data">POST = <a id="POST-var">N/A</a></p>
        </div>
        <div id="weather-div">
            <p id="weather-title">Current <a class="black">Weather</a></p>
            <p id="temperature-wrapper" class="black"><a id="temperature-var">N/A</a>CÂ°</p>
            <p id="humidity-wrapper"><a id="humidity-var">N/A</a>%</p>
            <p><a id="light-var">N/A</a>lx</p>
            <p class="black"><a id="wind-var">N/A</a>km/h</p>
            <p class="black" id="rain-var">N/A</p>
            <div id="status-div"></div>
        </div>
        <div id="setup-div">
            <button id="align-north-btn" class="setup-btns">Align to N</button>
            <button id="align-antenna-btn" class="setup-btns">Start Reception session</button>
        </div>
    </main>
    <div id="popup-wrapper">
        <div id="popup-div">
            <h1 id="popup-title">Warning!</h1>
            <p id="popup-subtitle">This action needs a <b>password</b> to continue, insert it in the box below to continue.</p>
            <input type="password" placeholder="password" id="popup-psw">
            <button type="submit" id="popup-btn">Send</button>
        </div>
    </div>   
    <footer>
        <p id="signature" onclick=" location.href='https://github.com/SebsIII'">By Sebs_</p>
    </footer>
    <script>

//SETUP
const main = document.querySelector("main")
const popup_wrapper = document.getElementById("popup-wrapper")
const popup_div = document.getElementById("popup-div")
const popup_psw = document.getElementById("popup-psw")

const antenna_animation = document.getElementById("antenna-animation")

//BTNS
const align_btn = document.getElementById("align-antenna-btn")
const popup_btn = document.getElementById("popup-btn") 

const setup_btns = document.querySelectorAll(".setup-btns")

//RAW data
const light_RAW_var = document.getElementById("light-RAW-var")
const rain_RAW_var = document.getElementById("rain-RAW-var")
const wind_RAW_var = document.getElementById("wind-RAW-var")

//GENERAL data
const AA_var = document.getElementById("AA-var")
const AD_var = document.getElementById("AD-var")
const POST_var = document.getElementById("POST-var")

const rain_var = document.getElementById("rain-var")

POST_var.innerText = "true"
AD_var.innerHTML = "counter-clockwise"

//VARS
var selectedCmmd;


setInterval(function()
{
    getGeneral();
    getTemperature();
    getHumidity();
    getLight();
    getWind();
    getRain();
}, 2000);

setup_btns.forEach((btn) => {
    btn.addEventListener("click",() => {
        selectedCmmd = btn.id
        console.log("setup-btn clicked.")
        popup_wrapper.style.display = "flex"
        popup_div.style.display = "flex"
        setTimeout(() => {
            popup_wrapper.style.backdropFilter = "blur(5px) brightness(90%)" 
            popup_div.style.opacity = "100%"
        }, 30)
    })
})

popup_btn.addEventListener("click", async () => {
    var psw = popup_psw.value
    if(psw){
        if(selectedCmmd){
            console.log(selectedCmmd)
            console.log(popup_psw.value)
            popup_psw.value = ""
            const output = await ReqMaker(`pswReq/${psw}`)
            console.log(output)
            if (output == "true"){
                alert("login correct.")
                //display success panel
            }
            else{
                location.href = "index.html"
            }
        }
    }
})

async function ReqMaker(request){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.open("GET", request, false);
    SRCSRequest.send();

    if (SRCSRequest.status === 200 && SRCSRequest.responseText !== null) {
        return SRCSRequest.responseText;
    }
}

function getTemperature()
{
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        document.getElementById("temperature-var").innerHTML = this.responseText;
    }
    };
    SRCSRequest.open("GET", "readT", true);
    SRCSRequest.send();
}

function getHumidity()
{
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        document.getElementById("humidity-var").innerHTML = this.responseText;
    }
    };
    SRCSRequest.open("GET", "readH", true);
    SRCSRequest.send();
}

function getLight(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        light_RAW_var.innerHTML = this.responseText
        document.getElementById("light-var").innerHTML = this.responseText;
    }
    };
    SRCSRequest.open("GET", "readL", true);
    SRCSRequest.send();
}

function getRain(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        rain_RAW_var.innerHTML = this.responseText
        let value = this.responseText, valueString
        rain_var.style.color = ""

        if (value >= 1020){
            valueString = "Clear sky";
        } else if(value >= 800 && value < 1020){
            valueString = "Some droplets";
        } else if(value >= 600 && value < 800){
            valueString = "It's raining";
        } else if(value >= 50 && value < 600){
            valueString = "Heavy raining";
        } else if(value >= 0 && value < 50){
            valueString = "Metal on sensor";
            rain_var.style.color = "red"
        }

        rain_var.innerHTML =  valueString;
    }
    };
    SRCSRequest.open("GET", "readR", true);
    SRCSRequest.send();
}

function getWind(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        wind_RAW_var.innerHTML = this.responseText
        document.getElementById("wind-var").innerHTML = this.responseText;
    }
    };
    SRCSRequest.open("GET", "readW", true);
    SRCSRequest.send();
}

function getSRCS(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        document.getElementById("POST-var").innerHTML = this.responseText;
    }
    };
    SRCSRequest.open("GET", "readSRCS", true);
    SRCSRequest.send();
}

function getGeneral(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        var angle = this.responseText
        AA_var.innerHTML = angle
        antenna_animation.style.transform = `rotate(${Number(angle)}deg)`
    }
    };
    SRCSRequest.open("GET", "readGENERAL", true);
    SRCSRequest.send();
}

function alignAntennaTo0(){
    var SRCSRequest = new XMLHttpRequest();
    SRCSRequest.onreadystatechange = function()
    {
    if(this.readyState == 4 && this.status == 200 && this.responseText != null)
    {
        console.log("Antenna-align-to-0 sent and received.")
    }
    };
    SRCSRequest.open("GET", "alignAntennaTo0", true); // add formatting of url
    SRCSRequest.send();
}
    </script>
</body>
</html>